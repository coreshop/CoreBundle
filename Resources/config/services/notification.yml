services:
    # Notification Rule Conditions
    coreshop.notification_rule.condition.order.invoice_state:
        class: CoreShop\Component\Core\Notification\Rule\Condition\Order\InvoiceStateChecker
        tags:
           - { name: coreshop.notification_rule.condition, type: invoiceState, notification-type: order, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Condition\InvoiceStateConfigurationType }

    coreshop.notification_rule.condition.order.order_payment_state:
        class: CoreShop\Component\Core\Notification\Rule\Condition\Order\OrderPaymentStateChecker
        tags:
            - { name: coreshop.notification_rule.condition, type: orderPaymentState, notification-type: order, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Condition\OrderPaymentStateConfigurationType }

    coreshop.notification_rule.condition.order.shipment_state:
        class: CoreShop\Component\Core\Notification\Rule\Condition\Order\ShipmentStateChecker
        arguments: ['@coreshop.order.shipment.processable']
        tags:
           - { name: coreshop.notification_rule.condition, type: shipmentState, notification-type: order, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Condition\ShipmentStateConfigurationType }

    coreshop.notification_rule.condition.order.order_state:
        class: CoreShop\Component\Core\Notification\Rule\Condition\Order\OrderStateChecker
        tags:
            - { name: coreshop.notification_rule.condition, type: orderState, notification-type: order, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Condition\OrderStateConfigurationType }

    coreshop.notification_rule.condition.order.carriers:
        class: CoreShop\Component\Core\Notification\Rule\Condition\Order\CarriersChecker
        tags:
            - { name: coreshop.notification_rule.condition, type: carriers, notification-type: order, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Rule\Condition\CarriersConfigurationType }
            - { name: coreshop.notification_rule.condition, type: carriers, notification-type: quote, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Rule\Condition\CarriersConfigurationType }

    coreshop.notification_rule.condition.payment.payment_state:
          class: CoreShop\Component\Core\Notification\Rule\Condition\Payment\PaymentStateChecker
          tags:
            - { name: coreshop.notification_rule.condition, type: paymentState, notification-type: payment, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Condition\PaymentStateConfigurationType }

    coreshop.notification_rule.condition.user.user_type:
        class: CoreShop\Component\Core\Notification\Rule\Condition\User\UserTypeChecker
        tags:
            - { name: coreshop.notification_rule.condition, type: userType, notification-type: user, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Condition\UserTypeConfigurationType }

    # Notification Rule Actions
    coreshop.notification_rule.action.order_mail:
        class: CoreShop\Component\Core\Notification\Rule\Action\Order\OrderMailActionProcessor
        arguments:
            - '@coreshop.mail.processor.order'
        tags:
            - { name: coreshop.notification_rule.action, type: orderMail, notification-type: order, form-type: CoreShop\Bundle\CoreBundle\Form\Type\Notification\Action\OrderMailConfigurationType }

    coreshop.notification_rule.action.mail:
        class: CoreShop\Component\Notification\Rule\Action\MailActionProcessor
        tags:
            - { name: coreshop.notification_rule.action, type: mail, notification-type: order, form-type: CoreShop\Bundle\NotificationBundle\Form\Type\Rule\Action\MailActionConfigurationType }
            - { name: coreshop.notification_rule.action, type: mail, notification-type: user, form-type: CoreShop\Bundle\NotificationBundle\Form\Type\Rule\Action\MailActionConfigurationType }
            - { name: coreshop.notification_rule.action, type: mail, notification-type: payment, form-type: CoreShop\Bundle\NotificationBundle\Form\Type\Rule\Action\MailActionConfigurationType }
            - { name: coreshop.notification_rule.action, type: mail, notification-type: quote, form-type: CoreShop\Bundle\NotificationBundle\Form\Type\Rule\Action\MailActionConfigurationType }

    # Listeners -> here the actual magic happens
    coreshop.notification.listener.rule.abstract:
        class: CoreShop\Bundle\CoreBundle\EventListener\NotificationRules\AbstractNotificationRuleListener
        abstract: true
        arguments:
            - '@coreshop.notification_rule.processor'
            - '@coreshop.context.shopper'

    coreshop.notification.listener.quote:
        class: CoreShop\Bundle\CoreBundle\EventListener\NotificationRules\QuoteListener
        parent: coreshop.notification.listener.rule.abstract
        tags:
            - { name: kernel.event_listener, event: coreshop.quote.post_transform, method: applyRule }

    coreshop.notification.listener.order:
        class: CoreShop\Bundle\CoreBundle\EventListener\NotificationRules\OrderWorkflowListener
        parent: coreshop.notification.listener.rule.abstract
        tags:
            - { name: kernel.event_listener, event: workflow.coreshop_order.completed, method: applyOrderWorkflowRule }
            - { name: kernel.event_listener, event: workflow.coreshop_order_invoice.completed, method: applyOrderWorkflowRule }
            - { name: kernel.event_listener, event: workflow.coreshop_order_shipment.completed, method: applyOrderWorkflowRule }
            - { name: kernel.event_listener, event: workflow.coreshop_order_payment.completed, method: applyOrderWorkflowRule }

    coreshop.notification.listener.payment:
        class: CoreShop\Bundle\CoreBundle\EventListener\NotificationRules\PaymentWorkflowListener
        parent: coreshop.notification.listener.rule.abstract
        calls:
            - [setOrderRepository, ['@coreshop.repository.order']]
        tags:
            - { name: kernel.event_listener, event: workflow.coreshop_payment.completed, method: applyPaymentWorkflowTransitionCompleted }

    coreshop.notification.listener.customer:
        class: CoreShop\Bundle\CoreBundle\EventListener\NotificationRules\CustomerListener
        parent: coreshop.notification.listener.rule.abstract
        tags:
            - { name: kernel.event_listener, event: coreshop.customer.request_password_reset, method: applyPasswordRequestResetRule }
            - { name: kernel.event_listener, event: coreshop.customer.register, method: applyRegisterCustomerRule }